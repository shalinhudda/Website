project_list = [
	{
		"ProjectName": "Front-end web development",
		"ProjectDate": "May 2020",
		"ProjectDescription": ["Designed this website from scratch with latest web development tools and hosted it on a cloud VM instance with LAMP on Debian OS.", 
								"I took a basic front-end web-development course from Udemy, understood the basics and built upon it to create a responsive website.",
								"<br><br>", 
								"This responsive website uses JavaScript extensively to retrieve updated data from JSON files and adds it to HTML document dynamically.",
								"To debug coding issues, I employed Chrome Web Development tools which helped me solve issues quickly and made responsive elements easier to visualize.",
								"<br><br>",
								"Added PHPMailer on 'Contact Me' page to learn PHP and get familiar with industry practices. Also, used Bootstrap wherever possible to speed up development process",
								"and to make responsive development easier."],
		"ProjectSkillsLearned": ["HTML5", "CSS3", "Bootstrap", "JavaScript", "DOM", "jQuery", "PHP", "TypeScript", "Responsive Web Development", "Apache", "LAMP", "Chrome Web Development Tools"],
		"ProjectImage": "../Images/product_28157_product_shots1.jpg"
	},
	{
		"ProjectName": "Retial Anlytics with Deep Learing",
		"ProjectDate": "September 2019 - April 2020",
		"ProjectDescription": ["Worked in a team of 5 members alongside an industry partner", 
							"to design an end-to-end deep learning solution which collected consumer data to perform retail analytics.",
							"<br><br>",
							"The software was able to count and track people entering and leaving a desginated area and", 
							"extract demographics such as age group, ethinicity and gender.", 
							"This data helps retail stores schedule shifts efficiently, bring in products consumers prefer and provides data to make infromed decisions.",
							"<br><br>",
							"Finalist of the video advertisement competition (see <a style='color:#0C71C3;' href='https://www.youtube.com/embed/padTRz973ZE'>video</a>) and most importantly our industry partner was exteremely happy with the results.",
							"Technical video demonstration available <a style='color:#0C71C3;' href='https://www.youtube.com/watch?v=jIp5frkCBIo'>here</a>."],
		"ProjectSkillsLearned": ["C++","Python", "Linux", "Data Collection", "Training", "MobileNet SSD with Caffe"],
		"ProjectImage": "<iframe width='100%' height='100%' src='https://www.youtube.com/embed/padTRz973ZE' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>",
		"ImageOrVideo": "video"
	},
	{
		"ProjectName": "Developed NAND Flash Interface through SPI Controller for 68000 CPU",
		"ProjectDate": "March 2020",
		"ProjectDescription":["Added a SPI bus controller (downloaded from OpenCores.org) to soft-core 68000 CPU computer system on FPGA and hung a Flash memory chip from the controller.",
							"<br><br>", 
							"The SPI controller was designed to be Wishbone compliant. It had a parallel bus interface for the CPU and SPI serial interface for the Flash memory.",
							"In this project, the SPI controller was set up to be able to program/load data to/from 68000 CPU's DRAM. <br><br>Finally, I integrated this application into a debug monitor",
							"to allow data transfer from Flash memory to DRAM during start up."],
		"ProjectSkillsLearned": ["NAND Flash Memory", "SPI Controller","Wishbone Bus", "68000 CPU", "Read/Write from/to Flash", "Quartus", "FPGA", "SPI Bus", "Verilog", "OpenCores.org"],
		"ProjectImage": "../Images/an500-1(1).png"		
	},
	{
		"ProjectName": "Designed Synchronous DRAM Controller for 68000 CPU",
		"ProjectDate": "March 2020",
		"ProjectDescription":["Designed a DRAM controller for 64M byte synchronous DRAM (ISSI-ID42S1632D) to interface with a soft-core Motorola 68000 CPU and developed an address decoder and DTACK generator circuit to meet CPU requirements.",
							"<br><br>",
							"Created a sophisticated state machine for the DRAM controller and employed hardware timers to initialize SDRAM, run auto-refresh routines and set up read/write functions in accordance with the ISSI-ID42S1632D datasheet.",
							"<br><br>",
							"Simulated waveforms for initialization, read, write and auto-refresh routines of the DRAM controller to meet the complex timing requirements of the SDRAM and ensure appropriate functionality."],
		"ProjectSkillsLearned": ["Address Decoder", "Dtack Generator", "Synchronous DRAM", "Verilog", "68000 CPU", "Quartus", "FPGA", "State Machines"],
		"ProjectImage": "../Images/F11_27.jpg"
	},
	{
		"ProjectName": "68000 CPU Debug Monitor Setup with ROM and Synchronous SRAM",
		"ProjectDate": "February 2020",
		"ProjectDescription":["Created a 16K Word on-chip ROM in Quartus to interface with a soft-core version of Motorola 68000 CPU and wrote a memory initialization file in the ROM to set up a debug monitor.", 
							"<br><br>",
							"Employed 256k bytes of synchronous on-chip SRAM and set up logic for OE, WREN, DTACK, address decoder and CE to store variables and stack needed by the debug monitor.",
							"Simulated various signals of the 68000 CPU and synchronous SRAM to ensure that the specified read and write cycle timings were met."],
		"ProjectSkillsLearned": ["Verilog", "68000 CPU", "Quartus", "FPGA"],
		"ProjectImage": "../Images/Debug_sram_image.jpg"		
	},
	{
		"ProjectName": "3 Phase inverter (DC-AC)",
		"ProjectDate": "November 2019",
		"ProjectDescription":["Simulated a 3-Phase inverter in PSIM at different switching frequencies to observe the effect on harmonics. From this simulation, I realized higher frequency",
							"is desireable to reduce harmonics but at the same it also increases power losses. Therefore, switching frequency must be chosen based on its application and trade-offs.",
							"<br><br>",
							"Confirmed the simulation results with an expermintal setup of 3-Phase inverter in a lab setting and found that the relationship demostrated by the simulation holds in real life too."],
		"ProjectSkillsLearned": ["PSIM", "LabVolt", "Oscilloscope", "FFT", "Differential Probes", "IGBT", "PWM Generator"],
		"ProjectImage": "../Images/Three-phase-inverter-circuit.png"
	},
	{
		"ProjectName": "Real-time Safety Critical Elevator System Design",
		"ProjectDate": "November 2019",
		"ProjectDescription":["Developed a real-time, multi-threaded and safety critical 2 elevator system model using inter-process communication methods such as pipelines, semaphores, mailboxes, monitors and datapools in C++.",
							"Created a scalable algorithm which can support up to 10 elevators and optimized it to minimize wait times.",
							"<br><br>",
							"Tested the model through real-time graphical simulation by creating passengers (active objects) at run-time to perform random actions and record the systemâ€™s behavior.",
							"Examined the safety critical responsiveness of the elevators by manually interrupting the system during various stages and verifying its output."],
		"ProjectSkillsLearned": ["C++", "Multithreading", "Semaphores", "Mutex", "Inter-process Communication", "Asynchronous Verification"],
		"ProjectImage": "../Images/elevator.jpg"
	},
	{
		"ProjectName": "Half-Bridge inverter (DC-AC)",
		"ProjectDate": "November 2019",
		"ProjectDescription":["Simulated a half-bridge inverter in PSIM with various modulation indices and frequencies to see the effect on the ripple current, ripple votlage, output voltage and total harmonic distortion (THD).",
							"<br><br>",
							"I realized that with higher frequencies the output voltage does not change much because it is only dependent on the modulation index. However, the ripple current, ripple voltage and THD decreases.",
							"<br><br>",
							"I confirmed the simulation with an expermintal setup of the circuit and found that the trend shown by the experiments is similar to that of simulation. However, the actual values are much different",
							"from both calculations and simulation.",
							"<br><br>",
							"PSIM assumes ideal components therefore values are expected to be different but this was not the only issue. With real components, there are always unwanted parasitic elements which skew the results quite a bit.",
							"<br><br>",
							"Thus, one must take into account these effects when setting up the circuit and selecting component values."],
		"ProjectSkillsLearned": ["PSIM", "High Power MOSFETS", "Oscilloscope", "FFT", "Differential Probes", "Signal Generator", "PWM Generator"],
		"ProjectImage": "../Images/HB_inverter.jpg"
	},
	{
		"ProjectName": "Designed and Simulated 3 input NAND gate (mosfet) with Cadence",
		"ProjectDate": "November 2019",
		"ProjectDescription":["Used Cadence design tools to layout, charcterize and simulate a symmetrical 3-input NAND gate built from NMOS and PMOS.",
							"Simulation of the transient waveforms revealed that NMOS was pulling the logic from high to low much faster during worst-case scenario than PMOS (as expected).",
							"<br><br>",
							"To fix this issue and keep high to low and low to high switching symmetrical, the PMOS was built wider thus achieving faster speed. Additionally, parasitic capacitance values",
							"were also extracted from Cadence to calculate the total delay.",
							"<br><br>",
							"I won the competion within my class to develop the lowest possibe 'Area x Total Delay' for the 3-input NAND gate.",
							"<br><br>",
							"Area x Total Delay = 174.41 pico-seconds * micro-meter<span style='font-size: 55&#37;; position: relative; top: -0.75em; font-weight: bold;'>2</span>"],
		"ProjectSkillsLearned": ["Cadence", "NMOS", "PMOS", "Simulation of Transients", "Worst-case Delay", "Parasitics"],
		"ProjectImage": "../Images/Layout.PNG"
	},
	{
		"ProjectName": "Real-time Multithreaded Formula 1 Pit Stop Simulation",
		"ProjectDate": "October 2019",
		"ProjectDescription": ["Employed concepts of concurrency and inter-process communication in C++ to develop processes and threads to create 10 cars (as active objects) at run-time and track statistics of each car such as position, lap time, and speed.",
							"<br><br>",
							"Utilized mutual exclusion principles to provide race cars with access to pit stop at run-time where 16 active objects would work on the process of replacing tires and refueling the car concurrently.",
							"Graphically displayed the status of each car on the racetrack as well as the progress of the 16 active objects working on a car in the pit stop."],
		"ProjectSkillsLearned": ["C++", "Multithreading", "Semaphores", "Mutex", "Inter-process Communication", "Asynchronous Verification"],
		"ProjectImage": "../Images/d3f3b3b26c003c125c1bdcf5f0184a93.jpg"
	},
	{
		"ProjectName": "2 Degree of Freedom Robotic Arm for laser light show",
		"ProjectDate": "January 2018 - April 2018",
		"ProjectDescription":["Worked with my partner to create a laser light show using 2 motors and a PID controller. My partner was reponsible for developing the controls system using Arduino IDE and Matlab.",
							"I was reponsible for developing the required hardware and housing infrastructure.",
							"<br><br>",
							"The basic requirement was to develop an Arduino Mega stackable sheild but to achieve higher standards I took a Udemy course for PCB development",
							"and designed a customized 2 layer PCB (in Altium) with ATmega2560 microcontroller (same as Arduino Mega microcontroller) along with high power motor drivers.",
							"<br><br>",
							"Although this PCB did not require differential pair routing due to shorter lengths and low speed, I decided to employ it anyway for the learning experience.", 
							"Furthermore, I used SolidWorks to design housing for multiple motors and created gears to reduce motor-drive costs and increase torque to driver bigger loads."],
		"ProjectSkillsLearned": ["Oscilloscope", "Power Supply", "ATmega2560 Microcontroller", "C", "MATLAB", "Arduino", "Altium", "Differential Pair Routing", "H-Bridge", "SolidWorks", "Gears"],
		"ProjectImage": "<iframe width='100%' height='100%' src='https://www.youtube.com/embed/sLKDBT2Wb7o' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>",
		"ImageOrVideo": "video"
	},
	{
		"ProjectName": "RC4 brute force decoding with FPGA",
		"ProjectDate": "November 2017",
		"ProjectDescription":["Converted sudo RC4 decryption algorithm into SystemVerilog and created complex state machines to handle brute-force decryption of RC4 encryption.",
							"These state machines communicated with each other using handshaking protocol which not only made the program less complex but also helped in integration of code written by multiple developers.",
							"<br><br>",
							"The real-time decryption was visualized through the In-Sytem Memory Content Editor provided by Quartus for DE1-SoC. This was also used to debug coding errors and display the decrytion key after the program broke the encryption", 
							"through a brute-force attack."],
		"ProjectSkillsLearned": ["FPGA", "DE1-SoC", "SystemVerilog", "Handshaking Algorithm", "State Machines", "Quartus", "ModelSim"],
		"ProjectImage": "../Images/preview-77718-ppTYmuHDQx_0003.jpg"	
	},
	{
		"ProjectName": "Simple iPod Design with FPGA",
		"ProjectDate": "October 2017",
		"ProjectDescription":["Programmed SystemVerilog on DE1-SoC using Quartus and ModelSim to generate two glitch free state machines, one incremented the addresses and the other one acquired song data from the flash memory.",
							"<br><br>",
							"Integrated the knowledge about asynchronous signals, synchronizers and edge detectors to use two different clock frequencies that worked together to fetch and pass audio data to digital-to-analog converter.", 
							"Utilized the buttons on DE1-SoC to forward, rewind, pause, play, speed up, and speed down the song stored in the flash memory and simulate a simple iPod."],
		"ProjectSkillsLearned": ["Clock Domain Crossing", "SystemVerilog", "FPGA", "DE1-SoC", "Digital to Analog Converter"],
		"ProjectImage": "../Images/1_gDxUIJCGAGk5Vy_LSuJfKw.jpg"		
	},
	{
		"ProjectName": "Electromagnetic Field Track Robot",
		"ProjectDate": "March 2017 - April 2017",
		"ProjectDescription":["Collaborated with 5 teammates to develop a magnetic field track robot capable of following a guide wire using built-in sensors and detection circuitry.",
							"Implemented customized communication protocols to send commands for NFMI Communication over the magnetic field generated by the guide wire.",
							"<br><br>",
							"Debugged over 3000 lines of C code which was then loaded onto At328p and FX38 microcontrollers to effectively control the robot.", 
							"Built peak detectors for signal processing and amplifying circuits to overcome signal strength attenuation.",
							"Designed Motor Intensity controllers (H-Bridge) using power N&P channel MOSFETS and LTV 847 optocouplers for noise isolation."],
		"ProjectSkillsLearned": ["NFMI Communication", "C", "AT328P Microcontroller", "FX38 Microcontroller", "H-Bridge", "LTV 847 Octocouplers", "Peak Dectectors", "MOSFETS"],
		"ProjectImage": "<iframe width='100%' height='100%' src='https://www.youtube.com/embed/rM0658YwE1E' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>",
		"ImageOrVideo": "video"
	},
	{
		"ProjectName": "Reflow Oven Soldering Controller",
		"ProjectDate": "January 2017 - February 2017",
		"ProjectDescription":["Built an 8051 based reflow oven controller that could control a 1500 W toaster oven using solid state relays to perfectly solder surface mountable devices (SMD)",
							"onto printed circuit boards (PCB).", "Achieved accuracy up to +/-1 degrees Celsius by implementing complex temperature control algorithms in C and",
							"calibrating the K-type thermocouple through extensive testing.", 
							"<br><br>",
							"Implemented automatic and manual safety breakers that were capable of cutting power instantly and turning off the toaster oven in case of a malfunction or fire.", 
							"Achieved the highest number of marks possible (100%), as a result of excellent design and implementation of extra features, such as an automated oven door and", 
							"a fan system, which were useful during the cooling stage."],
		"ProjectSkillsLearned": ["Assembly Code", "8051 Microcontroller", "C", "Circuit with LCD", "Cooling System", "Soldering"],
		"ProjectImage": "../Images/FTWS6MWH1EN06ZI.LARGE.jpg"
	},
	{
		"ProjectName": "RISC Machine Design with FPGA",
		"ProjectDate": "September 2016",
		"ProjectDescription":["Created a simple RISC machine in Verilog with datapath and state machines that worked together to understand binary instructions and perform actions based on user input.",
							"Developed the RISC machine with ALU which performed basic arithmetic operations such as 32-bit addition, multiplication, subtraction and division.", 
							"<br><br>",
							"Implemented the RISC architecture using registers and shifters. Used pipelining to make the arithmetic operations faster which led to a 100% score on this assignment."],
		"ProjectSkillsLearned": ["RISC Architecture", "FPGA", "DE1-SoC", "Verilog", "State Machines"],
		"ProjectImage": "../Images/RISC.jpg"
	},
	{
		"ProjectName": "Rain Water Harvest System",
		"ProjectDate": "April 2016",
		"ProjectDescription":["Analyzed weather patterns and rainfall data for the last ten years to design a rainwater harvesting system.", 
							"Extensively performed data analysis using Microsoft excel to process and organize the information with the help of mathematical formulas and user-defined functions.",
							"<br><br>",
							"Justified the choice of catchment area size and storage tank placement distance using mathematical formulas based on factors like roof footprint area, slope, average rainfall received, cloud cover, friction coefficient and length of pipe used for distribution of water.",
							"Devised an after-storage water treatment technique to remove contaminants using Ultra Violet light (UV) filtration and Ozonation which made the water potable."],
		"ProjectSkillsLearned": ["Microsoft Excel", "Excel Formulas", "Data Anlytics", "Pivot Table", "Graphical Data Representation"],
		"ProjectImage": "../Images/rain_water.jpg"
	},
	{
		"ProjectName": "claw with arduino",
		"ProjectDate": "January 2016",
		"ProjectDescription": ["The aim of this project was to learn how to program an Arduino connected with a sonar sensor and a servo motor.",
							"The secondary aim was to learn to design mechanical components using hand tools such as nibbler, shear and pliers.",
							"<br><br>",
							"The project goals were fullfilled with the creation of a simple claw made of metal sheets which detected objects using a sonar sensor.",
							"Upon detection, the claw would close and encapsulate the object in it."],
		"ProjectSkillsLearned": ["Arduino", "C", "Sonar sensor", "Servo motor"],	
		"ProjectImage": "<iframe width='100%' height='100%' src='https://www.youtube.com/embed/88ugaf7-ojw' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>",
		"ImageOrVideo": "video"
	}
];